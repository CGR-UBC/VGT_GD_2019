data_all$previous_won_lost<- c(0,data_all$won_lost[1:nrow(data_all)-1])
data_all$WinFirst[is.na(data_all$WinFirst)] <- 0 # Replace NA with zero
data_all$Group<- ifelse(data_all$Participant>300,1,0)#0 = stay; 1 = shift
# if we want both win and loss conditions in one model - we expect the slope to be opposite - so reverse for comparison - in gain as EVR increas p(highP) shoud increaase, in losses,as EVRincreases,p(lowP) should incrwase.So we want this column to be 1 if chose hih in win, and 1 if chose lowp in loss
data_all$mirrored_choice<-ifelse(data_all$condition=="Win",data_all$choseProspect1,(data_all$choseProspect1-1)*-1)
data_all<- within (data_all, {Group<-factor(Group,levels=0:1,labels = c("CON","GD"))})
# center repetition so that predictions are in middle of task
data_all$repetition_centred <-data_all$repetition-5.5
data_all$PGSI_zeroed<-data_all$PGSI-8
data_all$participant<-factor(data_all$participant)
data_all$Druguser<-ifelse(data_all$DAST>0,1,0)
data_all$Druguser[is.na(data_all$Druguser)] <- 0 # Replace NA with zero
data_all$AUDIT[is.na(data_all$AUDIT)] <- 0 # Replace NA with zero
data_all$AUDIT_centred<-data_all$AUDIT-mean(data_all$AUDIT)
data_all$DASS_TOTAL_centred<-data_all$DASS_TOTAL-mean(data_all$DASS_TOTAL)
data_all$participant<-factor(data_all$participant)
EV<- sort(subset(data_all$EVratio, !duplicated(data_all$EVratio)))
# Create data subsets for models
lossdata<-subset(data_all,condition=="Loss")
windata<-subset(data_all,condition=="Win")
GDlossdata<-subset(lossdata,Group=="GD")
GDwindata<-subset(windata,Group=="GD")
GD_data_all<-subset(data_all,Group=="GD")
GD_data_all$GRCS_centred<-GD_data_all$GRCS-mean(GD_data_all$GRCS)
GDwindata$GRCS_centred<-GDwindata$GRCS-mean(GDwindata$GRCS)
GDlossdata$GRCS_centred<-GDlossdata$GRCS-mean(GDlossdata$GRCS)
GD_data_all$Fagerstrom_centred<-GD_data_all$Fagerstrom-mean(GD_data_all$Fagerstrom)
GDwindata$Fagerstrom_centred<-GDwindata$Fagerstrom-mean(GDwindata$Fagerstrom)
GDlossdata$Fagerstrom_centred<-GDlossdata$Fagerstrom-mean(GDlossdata$Fagerstrom)
CONlossdata<-subset(lossdata,Group=="CON")
CONwindata<-subset(windata,Group=="CON")
CON_data_all<-subset(data_all,Group=="CON")
CON_data_all$GRCS_centred<-CON_data_all$GRCS-mean(CON_data_all$GRCS)
CONwindata$GRCS_centred<-CONwindata$GRCS-mean(CONwindata$GRCS)
CONlossdata$GRCS_centred<-CONlossdata$GRCS-mean(CONlossdata$GRCS)
GD_data_all$DASS_TOTAL_centred<-GD_data_all$DASS_TOTAL-mean(GD_data_all$DASS_TOTAL)
GDwindata$DASS_TOTAL_centred<-GDwindata$DASS_TOTAL-mean(GDwindata$DASS_TOTAL)
GDlossdata$DASS_TOTAL_centred<-GDlossdata$DASS_TOTAL-mean(GDlossdata$DASS_TOTAL)
GD_data_all$AUDIT_centred<-GD_data_all$AUDIT-mean(GD_data_all$AUDIT)
GDwindata$AUDIT_centred<-GDwindata$AUDIT-mean(GDwindata$AUDIT)
GDlossdata$AUDIT_centred<-GDlossdata$AUDIT-mean(GDlossdata$AUDIT)
# loss subset
loss_model = glmer(choseProspect1 ~ Group*EVratio + WinFirst*repetition_centred  + (repetition_centred|participant), data=lossdata, family = binomial,control = glmerControl(optimizer="bobyqa"))
summary(loss_model)
loss_model_confound_all= glmer(choseProspect1 ~ Group*EVratio*Druguser + Group*EVratio*AUDIT_centred  +
Group*EVratio*Smoker + WinFirst*repetition_centred  + (repetition_centred|participant), data=lossdata, family = binomial,control = glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=1e5)))
bsummary(loss_model_confound_all)
summary(loss_model_confound_all)
loss_model_confound_all1= glmer(choseProspect1 ~ Group*EVratio*Druguser +  Group*EVratio*DASS_TOTAL_centred +
Group*EVratio*Smoker + WinFirst*repetition_centred  + (repetition_centred|participant), data=lossdata, family = binomial,control = glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=1e5)))
summary(loss_model_confound_all1)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_knit$set(root.dir = "~/Data/github/cgr_vgt/expt1/2019_models/RT")
# run FE model as data is missing - due to trimming
win_PGSI_model_FE = lm(Decision_RT ~ PGSI*abs(EVratio) + WinFirst*repetition_centred  + participant, data=subset(windata_trimmed,Group=="GD"))
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_knit$set(root.dir = "~/Data/github/cgr_vgt/expt1/2019_models")
source("analysis/RT/MRtrim.R")
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_knit$set(root.dir = "~/Data/github/cgr_vgt/expt1/2019_models")
library(lme4)
library(ggplot2)
library(lattice)
library(lmerTest)
library(emmeans)
library(tidyverse)
library(influence.ME)
data_all=read.csv("all_participants_trial_data.csv")
participants=read.csv("scripts/participants_both.txt")
GD_participants<-subset(participants,X101>200)
data_all$chosenmag <- ifelse(data_all$choseProspect1==1,data_all$Prospect1mag, data_all$Prospect2mag)
data_all$outMag<-ifelse(data_all$won_lost==1,data_all$chosenmag,0)
data_all$PreviousoutMag<-c(0,data_all$outMag[1:nrow(data_all)-1])
data_all$PreviouschoseProspect1<-c(0,data_all$choseProspect1[1:nrow(data_all)-1])
data_all$stayShift<- ifelse(data_all$PreviouschoseProspect1==data_all$choseProspect1,0,1)#0 = stay; 1 = shift
data_all$previous_won_lost<- c(0,data_all$won_lost[1:nrow(data_all)-1])
data_all$WinFirst[is.na(data_all$WinFirst)] <- 0 # Replace NA with zero
data_all$Group<- ifelse(data_all$Participant>300,1,0)#0 = stay; 1 = shift
# if we want both win and loss conditions in one model - we expect the slope to be opposite - so reverse for comparison - in gain as EVR increas p(highP) shoud increaase, in losses,as EVRincreases,p(lowP) should incrwase.So we want this column to be 1 if chose hih in win, and 1 if chose lowp in loss
data_all$mirrored_choice<-ifelse(data_all$condition=="Win",data_all$choseProspect1,(data_all$choseProspect1-1)*-1)
#cues = ifelse(x$cued == 1, .5, -.5) #cued=.5; uncued=-.5, centered variable
#won_1 <- c(0, x$won[1:13099]) #1:{the number of observations-1}
#won_1 <- ifelse(won_1==1,.5,-.5) #center variable
data_all<- within (data_all, {Group<-factor(Group,levels=0:1,labels = c("CON","GD"))})
# center repetition so that predictions are in middle of task
data_all$repetition_centred <-data_all$repetition-5.5
data_all$PGSI_zeroed<-data_all$PGSI-8
data_all$participant<-factor(data_all$participant)
EV<- sort(subset(data_all$EVratio, !duplicated(data_all$EVratio)))
# Create data subsets for models
lossdata<-subset(data_all,condition=="Loss")
windata<-subset(data_all,condition=="Win")
GDlossdata<-subset(lossdata,Group=="GD")
GDwindata<-subset(windata,Group=="GD")
GD_data_all<-subset(data_all,Group=="GD")
source("analysis/RT/MRtrim.R")
RT_data<-data.frame(windata$trial,windata$Participant,as.factor(windata$EVratio),windata$Decision_RT)
names(RT_data) <- c("Trial","Participant","condition","RT")
winMRtrimoutput<-MRtrim(RT_data,1,5)#call RT trimming function - don;t removed min, or ius sample size < 5
windata_with_modRT<-cbind(windata,winMRtrimoutput$trimmed_data_withNAs)
windata_trimmed<-windata_with_modRT[complete.cases(windata_with_modRT[ , "mod_RT"]),]
winremovedTrials<-windata_with_modRT[is.na(windata_with_modRT$mod_RT),]
write.table(winMRtrimoutput$removedCount,"winRT_removed_trials_count.csv",sep=",")
write.table(winremovedTrials,"winRT_removed_trials.csv",sep=",")
windata_with_modRT$removed<-(is.na(windata_with_modRT$mod_RT)==TRUE)
write.table(windata_trimmed,"windata_trimmed.csv",sep=",")
lossdata$participant<-as.character(lossdata$participant)
RT_lossdata<-data.frame(lossdata$X,as.numeric(lossdata$participant),lossdata$EVratio,lossdata$Decision_RT)
names(RT_lossdata) <- c("trial","participant", "condition" , "rt")
allData<-RT_lossdata
conditions <- subset(allData$condition, !duplicated(allData$condition))
#how many are there?
numConditions <- length(conditions)
#produce a list with the condition names in it
conditionNames <- vector(length = numConditions)
for (a in 1:numConditions){
conditionNames[a] <- toString(conditions[a])
}
participants <- subset(allData$participant, !duplicated(allData$participant))
rounding <- 0
mod_RT <- numeric(0)
p_list <- numeric(0)
cond_list <- numeric(0)
trial <- numeric(0)
for (i in participants){ #for each participant
for (cond in conditionNames) {#for each condition
tempDatasubset <- subset(allData, participant == i & condition == cond)
restrictedData <- tempDatasubset
stDev <- 3.5
repeat{
###now do the removal of trials###
x <- max(restrictedData$rt, na.rm = TRUE)#find the largest value in the data structure
tempData <- restrictedData$rt[restrictedData$rt !=x] #temporarily remove largest value
sdVal <- sd(tempData,  na.rm = TRUE) #find SD of tecondmporary data
sdMax <- stDev * sdVal #find desired SDs of temporary data
maxCutoff <- sdMax + mean(tempData, na.rm = TRUE) #find maximum cutoff value of main data
minCutoff <- mean(tempData, na.rm = TRUE) - sdMax #find minimumc cutoff value of main data
x <- max(restrictedData$rt,na.rm = TRUE)#find the largest value in the main data structure
y <- min(restrictedData$rt,na.rm = TRUE)#find the smallest value in the main data structure
removedTrials <-0
#if there is a data point above the cutoff, remove it
if(x>maxCutoff ){
restrictedData$rt[ restrictedData$rt==x ] <- NA
removedTrials <- 1
}
#if there is a data poin below the cutoff, remove it
if(y<minCutoff){
restrictedData$rt[restrictedData$rt==y] <- NA
removedTrials <- 1
}
#when there are no trials removed on the current iteration, break the loop.
if(removedTrials == 0){break}
}
trial<-c(trial,restrictedData$trial)
mod_RT <- c(mod_RT,restrictedData$rt)
p_temp<-c(rep(i, length(restrictedData$rt)))
p_list<-c(p_list,p_temp)
cond_temp<-c(rep(cond, length(restrictedData$rt)))
cond_list<-c(cond_list,cond_temp)
}
}
lossdata_trimmed_output<-data.frame(trial,p_list,cond_list,mod_RT)
lossdata_trimmed_output <- lossdata_trimmed_output[order(lossdata_trimmed_output$p_list,lossdata_trimmed_output$trial ),]
lossdata_trimmed<-cbind(lossdata,lossdata_trimmed_output)
lossdata_trimmed<-lossdata_trimmed[complete.cases(lossdata_trimmed[ , "mod_RT"]),]
# win subset - include rep ME so can see what direction effect is in. And interaction with win first as seems likely that rep will have diff effect depending upon whether first or second task
win_model = lmer(Decision_RT ~ Group*abs(EVratio) + WinFirst*repetition_centred  + (repetition_centred|participant), data=windata_trimmed)
summary(win_model)
win_model_log = lmer(log(Decision_RT) ~ Group*abs(EVratio) + WinFirst*repetition_centred  + (repetition_centred|participant), data=windata_trimmed)
summary(win_model_log)
win_model_FE = lm(Decision_RT ~ abs(EVratio) + Group:abs(EVratio) + WinFirst*repetition_centred  + participant -1, data=windata_trimmed)
summary(win_model_FE)
subset(windata_trimmed,participant==561)
subset(windata_trimmed,participant==544)
subset(windata_trimmed,participant==561)
loss_model_FE = lm(Decision_RT ~ abs(EVratio) + Group:abs(EVratio) + WinFirst*repetition_centred  + participant -1, data=lossdata_trimmed)
summary(loss_model_FE)
temp<-subset(lossdata_trimmed,participant!=555
)
loss_model_FE = lm(Decision_RT ~ abs(EVratio) + Group:abs(EVratio) + WinFirst*repetition_centred  + participant -1, data=temp)
summary(loss_model_FE)
temp<-subset(lossdata_trimmed,participant!=561
)
loss_model_FE = lm(Decision_RT ~ abs(EVratio) + Group:abs(EVratio) + WinFirst*repetition_centred  + participant -1, data=temp)
summary(loss_model_FE)
loss_model_FE = lm(Decision_RT ~ abs(EVratio) + Group:abs(EVratio) + repetition_centred+ WinFirst:repetition_centred  + participant -1, data=lossdata_trimmed)
summary(loss_model_FE)
# run FE model as data is missing - due to trimming
win_PGSI_model_FE = lm(Decision_RT ~ PGSI*abs(EVratio) + WinFirst*repetition_centred  + participant, data=subset(windata_trimmed,Group=="GD"))
summary(win_PGSI_model_FE)
# run FE model as data is missing - due to trimming
win_PGSI_model_FE = lm(Decision_RT ~ PGSI*abs(EVratio) + repetition_centred + WinFirst:repetition_centred  + participant -1, data=subset(windata_trimmed,Group=="GD"))
summary(win_PGSI_model_FE)
# run FE model as data is missing - due to trimming
win_PGSI_model_FE = lm(Decision_RT ~ abs(EVratio)+PGSI:abs(EVratio) + repetition_centred + WinFirst:repetition_centred  + participant -1, data=subset(windata_trimmed,Group=="GD"))
summary(win_PGSI_model_FE)
# run FE model as data is missing - due to trimming
loss_PGSI_model_FE = lm(Decision_RT ~ abs(EVratio)+PGSI:abs(EVratio) + repetition_centred + WinFirst:repetition_centred  + participant -1, data=subset(lossdata_trimmed,Group=="GD"))
summary(loss_PGSI_model_FE)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_knit$set(root.dir = "~/Data/github/cgr_vgt/expt1/2019_models")
library(lme4)
library(ggplot2)
library(lattice)
library(lmerTest)
library(emmeans)
library(tidyverse)
library(influence.ME)
data_all=read.csv("all_participants_trial_data.csv")
participants=read.csv("scripts/participants_both.txt")
GD_participants<-subset(participants,X101>200)
#Average probability of chooing high p prospect per participant per condition
chose1<-data_all %>%
group_by(Participant,condition) %>%
summarise(average = mean(choseProspect1))
write.csv(chose1,"analysis/choice/model1_GD/pChose1.csv")
high_pchose1<-subset(chose1,average>=0.95)
low_pchose1<-subset(chose1,average<=0.05)
# Check participants didn't just always choose left or right
choseLeft<-data_all %>%
group_by(Participant,condition) %>%
summarise(average = mean(choice))
write.csv(choseLeft,"analysis/choice/model1_GD/pChoseLeft.csv")
high_pchoseLeft<-subset(choseLeft,average>=0.9)
low_pchoseLeft<-subset(choseLeft,average<=0.1)
data_all$chosenmag <- ifelse(data_all$choseProspect1==1,data_all$Prospect1mag, data_all$Prospect2mag)
data_all$outMag<-ifelse(data_all$won_lost==1,data_all$chosenmag,0)
data_all$PreviousoutMag<-c(0,data_all$outMag[1:nrow(data_all)-1])
data_all$PreviouschoseProspect1<-c(0,data_all$choseProspect1[1:nrow(data_all)-1])
data_all$stayShift<- ifelse(data_all$PreviouschoseProspect1==data_all$choseProspect1,0,1)#0 = stay; 1 = shift
data_all$previous_won_lost<- c(0,data_all$won_lost[1:nrow(data_all)-1])
data_all$WinFirst[is.na(data_all$WinFirst)] <- 0 # Replace NA with zero
data_all$Group<- ifelse(data_all$Participant>300,1,0)#0 = stay; 1 = shift
# if we want both win and loss conditions in one model - we expect the slope to be opposite - so reverse for comparison - in gain as EVR increas p(highP) shoud increaase, in losses,as EVRincreases,p(lowP) should incrwase.So we want this column to be 1 if chose hih in win, and 1 if chose lowp in loss
data_all$mirrored_choice<-ifelse(data_all$condition=="Win",data_all$choseProspect1,(data_all$choseProspect1-1)*-1)
data_all<- within (data_all, {Group<-factor(Group,levels=0:1,labels = c("CON","GD"))})
# center repetition so that predictions are in middle of task
data_all$repetition_centred <-data_all$repetition-5.5
data_all$PGSI_zeroed<-data_all$PGSI-8
data_all$participant<-factor(data_all$participant)
data_all$AUDIT[is.na(data_all$AUDIT)] <- 0 # Replace NA with zero
data_all$AUDIT_centred<-data_all$AUDIT-mean(data_all$AUDIT)
data_all$Druguser<-ifelse(data_all$DAST>0,1,0)
data_all$Druguser[is.na(data_all$Druguser)] <- 0 # Replace NA with zero
data_all$DASS_TOTAL_centred<-data_all$DASS_TOTAL-mean(data_all$DASS_TOTAL)
data_all$participant<-factor(data_all$participant)
EV<- sort(subset(data_all$EVratio, !duplicated(data_all$EVratio)))
# Create data subsets for models
lossdata<-subset(data_all,condition=="Loss")
windata<-subset(data_all,condition=="Win")
GDlossdata<-subset(lossdata,Group=="GD")
GDwindata<-subset(windata,Group=="GD")
GD_data_all<-subset(data_all,Group=="GD")
GD_data_all$GRCS_centred<-GD_data_all$GRCS-mean(GD_data_all$GRCS)
GDwindata$GRCS_centred<-GDwindata$GRCS-mean(GDwindata$GRCS)
GDlossdata$GRCS_centred<-GDlossdata$GRCS-mean(GDlossdata$GRCS)
GD_data_all$Fagerstrom_centred<-GD_data_all$Fagerstrom-mean(GD_data_all$Fagerstrom)
GDwindata$Fagerstrom_centred<-GDwindata$Fagerstrom-mean(GDwindata$Fagerstrom)
GDlossdata$Fagerstrom_centred<-GDlossdata$Fagerstrom-mean(GDlossdata$Fagerstrom)
CONlossdata<-subset(lossdata,Group=="CON")
CONwindata<-subset(windata,Group=="CON")
CON_data_all<-subset(data_all,Group=="CON")
CON_data_all$GRCS_centred<-CON_data_all$GRCS-mean(CON_data_all$GRCS)
CONwindata$GRCS_centred<-CONwindata$GRCS-mean(CONwindata$GRCS)
CONlossdata$GRCS_centred<-CONlossdata$GRCS-mean(CONlossdata$GRCS)
GD_data_all$DASS_TOTAL_centred<-GD_data_all$DASS_TOTAL-mean(GD_data_all$DASS_TOTAL)
GDwindata$DASS_TOTAL_centred<-GDwindata$DASS_TOTAL-mean(GDwindata$DASS_TOTAL)
GDlossdata$DASS_TOTAL_centred<-GDlossdata$DASS_TOTAL-mean(GDlossdata$DASS_TOTAL)
CON_data_all$GRCS_centred<-CON_data_all$GRCS-mean(CON_data_all$GRCS)
CONwindata$GRCS_centred<-CONwindata$GRCS-mean(CONwindata$GRCS)
CONlossdata$GRCS_centred<-CONlossdata$GRCS-mean(CONlossdata$GRCS)
GD_data_all$AUDIT_centred<-GD_data_all$AUDIT-mean(GD_data_all$AUDIT)
GDwindata$AUDIT_centred<-GDwindata$AUDIT-mean(GDwindata$AUDIT)
GDlossdata$AUDIT_centred<-GDlossdata$AUDIT-mean(GDlossdata$AUDIT)
GD_ind_diffs <- subset(GD_data_all, !duplicated(GD_data_all$participant))
CON_ind_diffs <- subset(CON_data_all, !duplicated(CON_data_all$participant))
hist(GD_ind_diffs$GRCS, breaks = 10)
hist(CON_ind_diffs$GRCS, breaks = 10)
GD_full_model_confounds = glmer(mirrored_choice ~ EVratio*PGSI_zeroed*condition + EVratio*GRCS_centred*condition +
EVratio*Druguser*condition + EVratio*AUDIT_centred*condition + EVratio*DASS_TOTAL_centred*condition + EVratio*Smoker*condition +
WinFirst*repetition_centred + condition*repetition_centred + (repetition_centred|participant),
data=GD_data_all, family = binomial,control = glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=1e5)))
summary(GD_full_model_confounds)
GD_win_model_confounds = glmer(choseProspect1 ~ EVratio*PGSI_zeroed + EVratio*GRCS_centred + EVratio*smoker + EVratio*AUDIT_centred
+ EVratio*Druguser + EVratio*DASS_TOTAL_centred + WinFirst*repetition_centred + (repetition_centred|participant), data=GDwindata, family = binomial,control = glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=1e5)))
GD_win_model_confounds = glmer(choseProspect1 ~ EVratio*PGSI_zeroed + EVratio*GRCS_centred + EVratio*Smoker + EVratio*AUDIT_centred
+ EVratio*Druguser + EVratio*DASS_TOTAL_centred + WinFirst*repetition_centred + (repetition_centred|participant), data=GDwindata, family = binomial,control = glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=1e5)))
summary(GD_win_model_confounds)
GD_loss_model_confounds = glmer(choseProspect1~ EVratio * Smoker +EVratio*PGSI_zeroed + EVratio*GRCS_centred + EVratio*DASS_TOTAL_centred + WinFirst*repetition_centred + (repetition_centred|participant), data=GDlossdata, family = binomial,control = glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=1e5)))
summary(GD_loss_model_confounds)
summary(GD_full_model_confounds)
summary(GD_win_model_confounds)
summary(GD_loss_model_confounds)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_knit$set(root.dir = "~/Data/github/cgr_vgt/expt1/2019_models")
library(lme4)
library(ggplot2)
library(lattice)
library(lmerTest)
library(emmeans)
library(tidyverse)
library(influence.ME)
data_all=read.csv("all_participants_trial_data.csv")
participants=read.csv("scripts/participants_both.txt")
GD_participants<-subset(participants,X101>200)
#Average probability of chooing high p prospect per participant per condition
chose1<-data_all %>%
group_by(Participant,condition) %>%
summarise(average = mean(choseProspect1))
write.csv(chose1,"analysis/choice/model1_GD/pChose1.csv")
high_pchose1<-subset(chose1,average>=0.95)
low_pchose1<-subset(chose1,average<=0.05)
# Check participants didn't just always choose left or right
choseLeft<-data_all %>%
group_by(Participant,condition) %>%
summarise(average = mean(choice))
write.csv(choseLeft,"analysis/choice/model1_GD/pChoseLeft.csv")
high_pchoseLeft<-subset(choseLeft,average>=0.9)
low_pchoseLeft<-subset(choseLeft,average<=0.1)
data_all$chosenmag <- ifelse(data_all$choseProspect1==1,data_all$Prospect1mag, data_all$Prospect2mag)
data_all$outMag<-ifelse(data_all$won_lost==1,data_all$chosenmag,0)
data_all$PreviousoutMag<-c(0,data_all$outMag[1:nrow(data_all)-1])
data_all$PreviouschoseProspect1<-c(0,data_all$choseProspect1[1:nrow(data_all)-1])
data_all$stayShift<- ifelse(data_all$PreviouschoseProspect1==data_all$choseProspect1,0,1)#0 = stay; 1 = shift
data_all$previous_won_lost<- c(0,data_all$won_lost[1:nrow(data_all)-1])
data_all$WinFirst[is.na(data_all$WinFirst)] <- 0 # Replace NA with zero
data_all$Group<- ifelse(data_all$Participant>300,1,0)#0 = stay; 1 = shift
# if we want both win and loss conditions in one model - we expect the slope to be opposite - so reverse for comparison - in gain as EVR increas p(highP) shoud increaase, in losses,as EVRincreases,p(lowP) should incrwase.So we want this column to be 1 if chose hih in win, and 1 if chose lowp in loss
data_all$mirrored_choice<-ifelse(data_all$condition=="Win",data_all$choseProspect1,(data_all$choseProspect1-1)*-1)
data_all<- within (data_all, {Group<-factor(Group,levels=0:1,labels = c("CON","GD"))})
# center repetition so that predictions are in middle of task
data_all$repetition_centred <-data_all$repetition-5.5
data_all$PGSI_zeroed<-data_all$PGSI-8
data_all$participant<-factor(data_all$participant)
data_all$AUDIT[is.na(data_all$AUDIT)] <- 0 # Replace NA with zero
data_all$AUDIT_centred<-data_all$AUDIT-mean(data_all$AUDIT)
data_all$Druguser<-ifelse(data_all$DAST>0,1,0)
data_all$Druguser[is.na(data_all$Druguser)] <- 0 # Replace NA with zero
data_all$DASS_TOTAL_centred<-data_all$DASS_TOTAL-mean(data_all$DASS_TOTAL)
data_all$participant<-factor(data_all$participant)
EV<- sort(subset(data_all$EVratio, !duplicated(data_all$EVratio)))
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_knit$set(root.dir = "~/Data/github/cgr_vgt/expt1/2019_models")
library(lme4)
library(ggplot2)
library(lattice)
library(lmerTest)
library(emmeans)
library(tidyverse)
library(influence.ME)
data_all=read.csv("all_participants_trial_data.csv")
participants=read.csv("scripts/participants_both.txt")
GD_participants<-subset(participants,X101>200)
#Average probability of chooing high p prospect per participant per condition
chose1<-data_all %>%
group_by(Participant,condition) %>%
summarise(average = mean(choseProspect1))
write.csv(chose1,"analysis/choice/model1_GD/pChose1.csv")
high_pchose1<-subset(chose1,average>=0.95)
low_pchose1<-subset(chose1,average<=0.05)
# Check participants didn't just always choose left or right
choseLeft<-data_all %>%
group_by(Participant,condition) %>%
summarise(average = mean(choice))
write.csv(choseLeft,"analysis/choice/model1_GD/pChoseLeft.csv")
high_pchoseLeft<-subset(choseLeft,average>=0.9)
low_pchoseLeft<-subset(choseLeft,average<=0.1)
data_all$chosenmag <- ifelse(data_all$choseProspect1==1,data_all$Prospect1mag, data_all$Prospect2mag)
data_all$outMag<-ifelse(data_all$won_lost==1,data_all$chosenmag,0)
data_all$PreviousoutMag<-c(0,data_all$outMag[1:nrow(data_all)-1])
data_all$PreviouschoseProspect1<-c(0,data_all$choseProspect1[1:nrow(data_all)-1])
data_all$stayShift<- ifelse(data_all$PreviouschoseProspect1==data_all$choseProspect1,0,1)#0 = stay; 1 = shift
data_all$previous_won_lost<- c(0,data_all$won_lost[1:nrow(data_all)-1])
data_all$WinFirst[is.na(data_all$WinFirst)] <- 0 # Replace NA with zero
data_all$Group<- ifelse(data_all$Participant>300,1,0)#0 = stay; 1 = shift
# if we want both win and loss conditions in one model - we expect the slope to be opposite - so reverse for comparison - in gain as EVR increas p(highP) shoud increaase, in losses,as EVRincreases,p(lowP) should incrwase.So we want this column to be 1 if chose hih in win, and 1 if chose lowp in loss
data_all$mirrored_choice<-ifelse(data_all$condition=="Win",data_all$choseProspect1,(data_all$choseProspect1-1)*-1)
data_all<- within (data_all, {Group<-factor(Group,levels=0:1,labels = c("CON","GD"))})
# center repetition so that predictions are in middle of task
data_all$repetition_centred <-data_all$repetition-5.5
data_all$PGSI_zeroed<-data_all$PGSI-8
data_all$participant<-factor(data_all$participant)
data_all$AUDIT[is.na(data_all$AUDIT)] <- 0 # Replace NA with zero
data_all$AUDIT_centred<-data_all$AUDIT-mean(data_all$AUDIT)
data_all$Druguser<-ifelse(data_all$DAST>0,1,0)
data_all$Druguser[is.na(data_all$Druguser)] <- 0 # Replace NA with zero
data_all$DASS_TOTAL_centred<-data_all$DASS_TOTAL-mean(data_all$DASS_TOTAL)
data_all$participant<-factor(data_all$participant)
EV<- sort(subset(data_all$EVratio, !duplicated(data_all$EVratio)))
# Create data subsets for models
lossdata<-subset(data_all,condition=="Loss")
windata<-subset(data_all,condition=="Win")
GDlossdata<-subset(lossdata,Group=="GD")
GDwindata<-subset(windata,Group=="GD")
GD_data_all<-subset(data_all,Group=="GD")
GD_data_all$GRCS_centred<-GD_data_all$GRCS-mean(GD_data_all$GRCS)
GDwindata$GRCS_centred<-GDwindata$GRCS-mean(GDwindata$GRCS)
GDlossdata$GRCS_centred<-GDlossdata$GRCS-mean(GDlossdata$GRCS)
GD_data_all$Fagerstrom_centred<-GD_data_all$Fagerstrom-mean(GD_data_all$Fagerstrom)
GDwindata$Fagerstrom_centred<-GDwindata$Fagerstrom-mean(GDwindata$Fagerstrom)
GDlossdata$Fagerstrom_centred<-GDlossdata$Fagerstrom-mean(GDlossdata$Fagerstrom)
CONlossdata<-subset(lossdata,Group=="CON")
CONwindata<-subset(windata,Group=="CON")
CON_data_all<-subset(data_all,Group=="CON")
CON_data_all$GRCS_centred<-CON_data_all$GRCS-mean(CON_data_all$GRCS)
CONwindata$GRCS_centred<-CONwindata$GRCS-mean(CONwindata$GRCS)
CONlossdata$GRCS_centred<-CONlossdata$GRCS-mean(CONlossdata$GRCS)
GD_data_all$DASS_TOTAL_centred<-GD_data_all$DASS_TOTAL-mean(GD_data_all$DASS_TOTAL)
GDwindata$DASS_TOTAL_centred<-GDwindata$DASS_TOTAL-mean(GDwindata$DASS_TOTAL)
GDlossdata$DASS_TOTAL_centred<-GDlossdata$DASS_TOTAL-mean(GDlossdata$DASS_TOTAL)
CON_data_all$GRCS_centred<-CON_data_all$GRCS-mean(CON_data_all$GRCS)
CONwindata$GRCS_centred<-CONwindata$GRCS-mean(CONwindata$GRCS)
CONlossdata$GRCS_centred<-CONlossdata$GRCS-mean(CONlossdata$GRCS)
GD_data_all$AUDIT_centred<-GD_data_all$AUDIT-mean(GD_data_all$AUDIT)
GDwindata$AUDIT_centred<-GDwindata$AUDIT-mean(GDwindata$AUDIT)
GDlossdata$AUDIT_centred<-GDlossdata$AUDIT-mean(GDlossdata$AUDIT)
GD_ind_diffs <- subset(GD_data_all, !duplicated(GD_data_all$participant))
CON_ind_diffs <- subset(CON_data_all, !duplicated(CON_data_all$participant))
hist(GD_ind_diffs$GRCS, breaks = 10)
hist(CON_ind_diffs$GRCS, breaks = 10)
GD_win_model_confounds = glmer(choseProspect1 ~ EVratio*PGSI_zeroed + EVratio*GRCS_centred + EVratio*Smoker + EVratio*AUDIT_centred
+ EVratio*Druguser + EVratio*DASS_TOTAL_centred + WinFirst*repetition_centred + (repetition_centred|participant), data=GDwindata, family = binomial,control = glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=1e5)))
summary(GD_win_model_confounds)
# Model predictions
GD_win_model_pp<-expand.grid(participant=GD_ind_diffs$participant,WinFirst=1,repetition_centred=0,PGSI_zeroed=c(0,19),GRCS_centred=c(-58,58),EVratio=EV,DASS_TOTAL_centred=0,AUDIT_centred=0, Smoker=c(0,1), Druguser=c(0,1))
GD_win_model_pp$predicted.probs<-predict(GD_win_model_confounds,GD_win_model_pp,type="response")
GD_win_model_pp_PGSI_summary<-GD_win_model_pp %>%
group_by(PGSI_zeroed,EVratio) %>%
summarise(avg=mean(predicted.probs))
GD_win_PGSI_plot<-ggplot(GD_win_model_pp_PGSI_summary, aes(x = EVratio, y = avg, color=factor(PGSI_zeroed))) +
geom_line() +
scale_y_continuous(breaks=seq(0,1,0.2),limits=c(0, 1),expand=c(0,0))  +
scale_x_continuous(limits=c(-1, 1),expand=c(0,0))  +
theme_bw() +theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +     theme(legend.position = "none") +
theme(panel.border= element_blank()) +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5)) + ylab("p(High probability prospect)") +
ggtitle("GD win PGSI")
ggsave(filename="analysis/choice/model1_GD/GD_PGSI_win.pdf", plot=GD_win_PGSI_plot, width = 4.5, height = 4.5 )
GD_win_PGSI_plot
GD_win_model_pp_GRCS_summary<-GD_win_model_pp %>%
group_by(GRCS_centred,EVratio) %>%
summarise(avg=mean(predicted.probs))
GD_win_GRCS_plot<-ggplot(GD_win_model_pp_GRCS_summary, aes(x = EVratio, y = avg, color=factor(GRCS_centred))) +
geom_line() +
scale_y_continuous(breaks=seq(0,1,0.2),limits=c(0, 1),expand=c(0,0))  +
scale_x_continuous(limits=c(-1, 1),expand=c(0,0))  +
theme_bw() +theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +      theme(legend.position = "none") +
theme(panel.border= element_blank()) +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5)) + ylab("p(High probability prospect)") +
ggtitle("GD win GRCS")
ggsave(filename="analysis/choice/model1_GD/GD_GRCS_win.pdf", plot=GD_win_GRCS_plot, width = 4.5, height = 4.5 )
GD_win_GRCS_plot
GD_loss_model_confounds = glmer(choseProspect1~ EVratio * Smoker +EVratio*PGSI_zeroed + EVratio*GRCS_centred + EVratio*DASS_TOTAL_centred + WinFirst*repetition_centred + (repetition_centred|participant), data=GDlossdata, family = binomial,control = glmerControl(optimizer="bobyqa",optCtrl=list(maxfun=1e5)))
summary(GD_loss_model_confounds)
# Model predictions
GD_loss_model_pp<-expand.grid(participant=GD_ind_diffs$participant,WinFirst=1,repetition_centred=0,PGSI_zeroed=c(0,19),GRCS_centred=c(-58,58),EVratio=EV,DASS_TOTAL_centred=0,AUDIT_centred=0, Smoker=c(0,1), Druguser=c(0,1))
GD_loss_model_pp$predicted.probs<-predict(GD_loss_model_confounds,GD_loss_model_pp,type="response")
GD_loss_model_pp_PGSI_summary<-GD_loss_model_pp %>%
group_by(PGSI_zeroed,EVratio) %>%
summarise(avg=mean(predicted.probs))
GD_loss_PGSI_plot<-ggplot(GD_loss_model_pp_PGSI_summary, aes(x = EVratio, y = avg, color=factor(PGSI_zeroed))) +
geom_line() +
scale_y_continuous(breaks=seq(0,1,0.2),limits=c(0, 1),expand=c(0,0))  +
scale_x_continuous(limits=c(-1, 1),expand=c(0,0))  +
theme_bw() +theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +  theme(legend.position = "none") +
theme(panel.border= element_blank()) +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5)) + ylab("p(High probability prospect)") +
ggtitle("GD loss PGSI")
ggsave(filename="analysis/choice/model1_GD/GD_PGSI_loss.pdf", plot=GD_loss_PGSI_plot, width = 4.5, height = 4.5 )
GD_loss_PGSI_plot
GD_loss_model_pp_GRCS_summary<-GD_loss_model_pp %>%
group_by(GRCS_centred,EVratio) %>%
summarise(avg=mean(predicted.probs))
GD_loss_GRCS_plot<-ggplot(GD_loss_model_pp_GRCS_summary, aes(x = EVratio, y = avg, color=factor(GRCS_centred))) +
geom_line() +
scale_y_continuous(breaks=seq(0,1,0.2),limits=c(0, 1),expand=c(0,0))  +
scale_x_continuous(limits=c(-1, 1),expand=c(0,0))  +
theme_bw() +theme(plot.background = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank()) +
theme(panel.border= element_blank()) + theme(legend.position = "none") +
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5)) + ylab("p(High probability prospect)") +
ggtitle("GD loss GRCS")
ggsave(filename="analysis/choice/model1_GD/GD_GRCS_loss.pdf", plot=GD_loss_GRCS_plot, width = 4.5, height = 4.5 )
GD_loss_GRCS_plot
library(pastecs)
rfromwilcox<-function(wilcoxModel,N){
z<-qnorm(wilcoxModel$p.value/2)
r<-z/sqrt(N)
cat(wilcoxModel$data.name,"Effect size, r = " , r)
}
setwd("~/Data/github/cgr_vgt/expt1/2019_models/analysis/characteristics")
data=read.csv("../../ind_diffsV2.csv")
data$Group <- ifelse(data$participant > 200, 1,0)
data<-within (data, {Group<-factor(Group,levels=0:1,labels = c("HC","GD"))})
data$Druguser<-ifelse(data$DAST > 0, 1,0)
data$Druguser[is.na(data$Druguser)] <- 0 # Replace NA with zero
data_smokers<-subset(data,Smoker==1)
data_drug_users<-subset(data,DAST>0)
by(data$Win_coins,data$Group,stat.desc,basic=TRUE,norm=TRUE)
by(data$Loss_coins,data$Group,stat.desc,basic=TRUE,norm=TRUE)
9.753655e-03
by(data$Win_coins,data$Group,stat.desc,basic=TRUE,norm=TRUE)
Win_coins_model<-wilcox.test(data$Win_coins~data$Group,paired=FALSE,exact=FALSE)# turn off exact as get error that cant do it
Win_coins_model
rfromwilcox(Win_coins_model,nrow(data))
by(data$Loss_coins,data$Group,stat.desc,basic=TRUE,norm=TRUE)
Loss_coins_model<-wilcox.test(data$Loss_coins~data$Group,paired=FALSE,exact=FALSE)# turn off exact as get error that cant do it
Loss_coins_model
rfromwilcox(Loss_coins_model,nrow(data))
